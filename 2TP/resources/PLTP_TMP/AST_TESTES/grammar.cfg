<Program> ::= <Declarations> <Body>


<Body> ::= BEGINNING <InstructionsList> END


<Declaration> ::= id
 | id [ num ]
 | id [ num ] [ num ]


<Declarations> ::= VAR <DeclarationsList> ;


<DeclarationsList> ::= <Declaration>
 | <DeclarationsList> , <Declaration>

<Constant> ::= num

<Factor> ::= <Constant>
 | <Variable>
 | ( - <Exp>)
 | ( <Exp> )
 | NOT ( <Exp> )


<Variable> ::= id
 | id [ <ExpAdditiv> ]
 | id [ <ExpAdditiv> ] [ <ExpAdditiv> ]


<Term>::= <Factor>
 | <Term> * <Factor>
 | <Term> / <Factor>
 | <Term> % <Factor>
 | <Term> AND <Factor>


<ExpAdditiv> ::= <Term>
 | <ExpAdditiv> + <Term>
 | <ExpAdditiv> - <Term>
 | <ExpAdditiv> OR <Term>


<Exp>::= <ExpAdditiv>
 | <ExpAdditiv> L <ExpAdditiv> 
 | <ExpAdditiv> G <ExpAdditiv> 
 | <ExpAdditiv> GE <ExpAdditiv> 
 | <ExpAdditiv> LE <ExpAdditiv> 
 | <ExpAdditiv> EQ <ExpAdditiv> 
 | <ExpAdditiv> NEQ <ExpAdditiv> 


<Atribution> ::= <Variable> = <ExpAdditiv>

<InstructionsList> ::= <Instruction>
| <InstructionsList> <Instruction>


<Instruction> ::= <Atribution> ;
| READ <Variable> ;
| WRITE <ExpAdditiv> ;
| WRITE string ;
| IF ( <Exp> ) { <InstructionsList> }
| IF ( <Exp> ) { <InstructionsList> } ELSE { <InstructionsList> }
| WHILE ( <Exp> ) { <InstructionsList> }
| DO { <InstructionsList> } WHILE ( <Exp> ) ;
